{"version":3,"sources":["../node_modules/tsup/assets/cjs_shims.js","../index.ts","../utils/commons.ts"],"sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","#!/usr/bin/env node\n\nimport path from \"node:path\";\nimport {fileURLToPath} from \"node:url\";\nimport {cp, readFile, writeFile} from \"node:fs/promises\";\nimport {glob} from \"glob\";\nimport color from \"picocolors\";\nimport prompts from \"prompts\";\nimport yargs from \"yargs\";\nimport {hideBin} from \"yargs/helpers\";\nimport commons from \"./utils/commons.js\";\n\nconst {templates, extras} = commons;\n\n// Specify CLI arguments\nconst args = yargs(hideBin(process.argv)).options({\n  name: {\n    alias: \"n\",\n    type: \"string\",\n    description: \"Name of the project\",\n  },\n  template: {\n    alias: \"t\",\n    type: \"string\",\n    description: \"Template to use\",\n  },\n});\n\n// Orverride arguments passed on the CLI\nprompts.override(args.argv);\n\nasync function main() {\n  const {\n    _: [initialName, initialProject],\n  } = await args.argv;\n\n  const project = await prompts(\n    [\n      {\n        type: \"text\",\n        name: \"name\",\n        message: \"What is the name of the project?\",\n        initial: initialName || \"incu-app\",\n        validate: (value) => {\n          if (value.match(/[^a-zA-Z0-9-_]+/g))\n            return \"Project name can only contain letters, numbers, dashes and underscores\";\n\n          return true;\n        },\n      },\n      {\n        type: \"select\",\n        name: \"template\",\n        message: `Which template would you like to use?`,\n        initial: initialProject || 0,\n        choices: templates,\n      },\n    ],\n    {\n      onCancel: () => {\n        console.log(\"\\nBye ðŸ‘‹\\n\");\n\n        process.exit(0);\n      },\n    },\n  );\n\n  const template = path.join(\n    path.dirname(fileURLToPath(import.meta.url)),\n    \"templates\",\n    project.template,\n  );\n  const destination = path.join(process.cwd(), project.name);\n\n  // Copy files from the template folder to the current directory\n  await cp(path.join(template, \"project\"), destination, {recursive: true});\n\n  // Get the extras for the selected template\n  let extrasArr: string[] = [];\n\n  if (extras[project.template]) {\n    const {extras: results} = await prompts({\n      type: \"multiselect\",\n      name: \"extras\",\n      message: \"Which extras would you like to add?\",\n      instructions: false,\n      choices: extras[project.template],\n    });\n\n    // Assign to variable\n    extrasArr = results;\n\n    for await (const extra of extrasArr) {\n      // Copy files from the extra folder to the current directory\n      await cp(path.join(template, \"extras\", extra), destination, {recursive: true});\n    }\n  }\n\n  // Get all files from the destination folder\n  const files = await glob(`**/*`, {nodir: true, cwd: destination, absolute: true});\n\n  // Read each file and replace the tokens\n  for await (const file of files) {\n    const data = await readFile(file, \"utf8\");\n    const draft = data.replace(/{{name}}/g, project.name);\n\n    await writeFile(file, draft, \"utf8\");\n  }\n\n  // Extras log\n  if (extrasArr.length) {\n    console.log(\n      `\\nCheck out the ${color.italic(\"README.md\")} file inside ${color.green(\n        extrasArr.join(\", \"),\n      )} for more info on how to use it.`,\n    );\n  }\n\n  // Log outro message\n  console.log(\"âœ¨ Project created âœ¨\");\n  console.log(`\\n${color.yellow(`Next steps:`)}\\n`);\n  console.log(`${color.green(`cd`)} ${project.name}`);\n  console.log(`${color.green(`yarn`)} or ${color.green(`npm i`)}`);\n  console.log(`${color.green(`yarn dev`)} or ${color.green(`npm run dev`)}`);\n}\n\nmain().catch(console.error);\n","const templates = [\n  {\n    title: \"React v18, Tailwind, DaisyUI\",\n    value: \"react-tw-daisyui\",\n  },\n];\n\nconst extras = {\n  \"react-tw-daisyui\": [\n    {\n      title: \"Zustand\",\n      value: \"zustand\",\n    },\n    {\n      title: \"MobX\",\n      value: \"mobx\",\n    },\n  ],\n};\n\nexport default {\n  templates,\n  extras,\n};\n"],"mappings":"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","names":["templates","extras","yargs","prompts","path","color"]}